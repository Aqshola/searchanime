{"version":3,"sources":["Components/search.js","Components/modals.js","Components/card.js","Components/cardlist.js","Components/switch.js","Components/pagenation.js","Containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","info","change","click","InputGroup","size","className","FormControl","placeholder","aria-label","aria-describedby","onChange","Append","Button","onClick","Modals","this","props","loading","show","hide","data","Modal","centered","ModalHeader","ModalBody","ModalFooter","synopsis","Component","CardCom","showModal","setState","fetch","toLowerCase","mal_id","then","res","json","el","dataDetail","closeModal","state","image_url","title","type","src","alt","div","variant","CardList","map","i","key","err","console","log","Choose","secondbtn","btn1","btn2","firstbtn","ButtonGroup","e","clicked","PaginationBasic","postPerPage","totalPost","paginate","page","pageNumbers","Math","ceil","push","Pagination","number","Item","active","App","searchChange","input","target","value","searchClick","Axios","get","results","currentPage","catch","er","error","chooseSearch","innerHTML","filterPost","indexOfLastPost","indexOfFirstPost","slice","switchPage","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4657f245.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { InputGroup, FormControl, Button } from \"react-bootstrap\"\r\nconst SearchBox = ({ info, change, click }) => {\r\n  return (\r\n    <InputGroup size=\"lg\" className=\"mb-3 searchBox\">\r\n      <FormControl\r\n        placeholder={\"Search \" + info}\r\n        aria-label=\"Recipient's username\"\r\n        aria-describedby=\"basic-addon2\"\r\n        onChange={change}\r\n      />\r\n      <InputGroup.Append>\r\n        <Button onClick={click} className=\"src-btn\">\r\n          Search\r\n        </Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","import React, { Component } from \"react\"\r\nimport { Modal, ModalBody, ModalFooter, Button } from \"react-bootstrap\"\r\nimport ModalHeader from \"react-bootstrap/esm/ModalHeader\"\r\n\r\nclass Modals extends Component {\r\n  render() {\r\n    const { loading, show, hide, data } = this.props\r\n    if (loading) {\r\n      return (\r\n        <Modal show={show} centered>\r\n          <ModalHeader>\r\n            <h2>Details</h2>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <h4>Loading...</h4>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={hide}>close</Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      )\r\n    }\r\n    return (\r\n      <Modal show={show}>\r\n        <ModalHeader>\r\n          <h2>Details</h2>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <p className=\"modal-desc\">{data.synopsis}</p>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button onClick={hide}>close</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modals\r\n","import React, { Component } from \"react\"\r\nimport { Button } from \"react-bootstrap\"\r\nimport Modals from \"./modals\"\r\n\r\nclass CardCom extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      show: false,\r\n      dataDetail: \"\",\r\n      loading: false,\r\n    }\r\n  }\r\n\r\n  showModal = () => {\r\n    this.setState({ show: true, loading: true })\r\n    fetch(\r\n      `https://api.jikan.moe/v3/${this.props.info.toLowerCase()}/${\r\n        this.props.data.mal_id\r\n      }`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((el) => {\r\n        this.setState({ dataDetail: el, loading: false })\r\n      })\r\n  }\r\n  closeModal = () => {\r\n    this.setState({ show: false })\r\n  }\r\n  render() {\r\n    const { image_url, title, type } = this.props.data\r\n    const { show, dataDetail, loading } = this.state\r\n    return (\r\n      <div className=\"cardplace\">\r\n        <div className=\"card-img\">\r\n          <img src={image_url} alt=\"img\" />\r\n        </div>\r\n        <div className=\"card-desc\">\r\n          <div className=\"card-title\">\r\n            <h6>{title}</h6>\r\n          </div>\r\n          <div className=\"card-text\">\r\n            <p>\r\n              <b>{type}</b>\r\n            </p>\r\n          </div>\r\n          <div div className=\"card-btn\">\r\n            <Button variant=\"primary\" onClick={this.showModal}>\r\n              Detail\r\n            </Button>\r\n          </div>\r\n\r\n          <Modals\r\n            loading={loading}\r\n            show={show}\r\n            hide={this.closeModal}\r\n            data={dataDetail}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CardCom\r\n","import React from \"react\";\r\nimport CardCom from \"./card\";\r\n\r\nconst CardList = ({ loading, info, data, click }) => {\r\n  try {\r\n    if (loading) {\r\n      return <h2 className=\"mx-auto\">Loading...</h2>;\r\n    }\r\n    return (\r\n      <div className=\"data-content mx-auto \">\r\n        {data.map((el, i) => {\r\n          return <CardCom key={i} info={info} data={data[i]} />;\r\n        })}\r\n      </div>\r\n    );\r\n  } catch (err) {\r\n    console.log(err);\r\n    return <h1 className=\"err-msg\">not found</h1>;\r\n  }\r\n};\r\nexport default CardList;\r\n","import React, { Component } from \"react\"\r\nimport { Button, ButtonGroup } from \"react-bootstrap\"\r\n\r\nclass Choose extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      btn1: \"active\",\r\n      btn2: \"\",\r\n    }\r\n  }\r\n  secondbtn = () => {\r\n    this.setState({ btn1: null, btn2: \"active\" })\r\n  }\r\n  firstbtn = () => {\r\n    this.setState({ btn1: \"active\", btn2: \"\" })\r\n  }\r\n\r\n  render() {\r\n    const { btn1, btn2 } = this.state\r\n    return (\r\n      <ButtonGroup aria-label=\"Basic example\" className=\"choose-grp\">\r\n        <Button\r\n          onClick={(e) => {\r\n            this.firstbtn()\r\n            this.props.clicked(e)\r\n          }}\r\n          variant=\"secondary\"\r\n          className={btn1}\r\n        >\r\n          Anime\r\n        </Button>\r\n        <Button\r\n          onClick={(e) => {\r\n            this.secondbtn()\r\n            this.props.clicked(e)\r\n          }}\r\n          className={btn2}\r\n          variant=\"secondary\"\r\n        >\r\n          Manga\r\n        </Button>\r\n      </ButtonGroup>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Choose\r\n","import React from \"react\"\r\nimport { Pagination } from \"react-bootstrap\"\r\n\r\nconst PaginationBasic = ({ postPerPage, totalPost, paginate, page }) => {\r\n  let pageNumbers = []\r\n  for (let i = 1; i <= Math.ceil(totalPost / postPerPage); i++) {\r\n    pageNumbers.push(i)\r\n  }\r\n  return (\r\n    <div className=\"mx-auto page\">\r\n      <Pagination size=\"md\">\r\n        {pageNumbers.map((number) => {\r\n          return (\r\n            <Pagination.Item\r\n              key={number}\r\n              onClick={(e) => {\r\n                paginate(e)\r\n                console.log(number, page)\r\n              }}\r\n              active={\r\n                // eslint-disable-next-line\r\n                page == number\r\n              }\r\n            >\r\n              {number}\r\n            </Pagination.Item>\r\n          )\r\n        })}\r\n      </Pagination>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PaginationBasic\r\n","import React, { Component } from \"react\"\r\nimport \"./App.css\"\r\nimport SearchBox from \"../Components/search\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport CardList from \"../Components/cardlist\"\r\nimport Choose from \"../Components/switch\"\r\nimport Axios from \"axios\"\r\nimport PaginationBasic from \"../Components/pagenation\"\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      input: \"\",\r\n      data: [],\r\n      info: \"Anime\",\r\n      postPerPage: 10,\r\n      currentPage: 1,\r\n      loading: false,\r\n      error: false,\r\n    }\r\n  }\r\n  searchChange = (e) => {\r\n    this.setState({ input: e.target.value })\r\n  }\r\n  searchClick = () => {\r\n    this.setState({ loading: true })\r\n    Axios.get(\r\n      `https://api.jikan.moe/v3/search/${this.state.info.toLowerCase()}?q=${\r\n        this.state.input\r\n      }&page=1`\r\n    )\r\n      .then((el) =>\r\n        this.setState({\r\n          data: el.data.results,\r\n          currentPage: 1,\r\n          loading: false,\r\n        })\r\n      )\r\n      .catch((er) => this.setState({ error: true }))\r\n  }\r\n  chooseSearch = (e) => {\r\n    this.setState({ info: e.target.innerHTML })\r\n  }\r\n  filterPost = () => {\r\n    const indexOfLastPost = this.state.currentPage * this.state.postPerPage\r\n    const indexOfFirstPost = indexOfLastPost - this.state.postPerPage\r\n\r\n    let postperPage = []\r\n    postperPage = this.state.data.slice(indexOfFirstPost, indexOfLastPost)\r\n    return postperPage\r\n  }\r\n  switchPage = (e) => {\r\n    this.setState({ currentPage: e.target.innerHTML })\r\n  }\r\n  render() {\r\n    const { loading, info, data, postPerPage, currentPage, error } = this.state\r\n\r\n    if (error) {\r\n      return <h1 className=\"error mx-auto\">404 Network Error :(</h1>\r\n    }\r\n\r\n    return (\r\n      <div className=\"content\">\r\n        <h1 className=\"mx-auto mt-5\">Manganime</h1>\r\n        <div className=\"searchBox\">\r\n          <SearchBox\r\n            info={info}\r\n            change={this.searchChange}\r\n            click={this.searchClick}\r\n          />\r\n          <Choose clicked={this.chooseSearch} />\r\n        </div>\r\n        <CardList loading={loading} info={info} data={this.filterPost()} />\r\n        <PaginationBasic\r\n          postPerPage={postPerPage}\r\n          totalPost={data.length}\r\n          paginate={this.switchPage}\r\n          page={currentPage}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./Containers/App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\nimport \"./custom.scss\"\r\nReactDOM.render(\r\n  <App />,\r\n\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}